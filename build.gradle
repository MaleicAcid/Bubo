// TODO insert analytics and adsense into javadoc

ext.libpath = file('./').absolutePath

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'org.projectbubo'
    version = '1.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }

    // Creates Java 8 byte code
    tasks.withType(JavaCompile).all { options.compilerArgs = ["--release", "8",] }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
    }

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'resources/src'
            }
        }

        test {
            java {
                srcDir 'test'
                srcDir 'generate'
                srcDir 'benchmark'
            }
            resources {
                srcDir 'resources/test'
            }
        }
    }

    dependencies {
        ['core','WebcamCapture'].each { String a ->
            compile("org.boofcv:boofcv-$a:0.36")
        }

        compileOnly 'org.projectlombok:lombok:1.18.10'
        compileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable
        compileOnly 'javax.annotation:jsr250-api:1.0'  // @Generated

        compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.10'

        testCompile group: 'junit', name: 'junit', version: '4.12'

        // needed to use Java 11+ syntax with Java 1.8 byte code
        annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')

        annotationProcessor 'org.projectlombok:lombok:1.18.10'  // @Getter @Setter
    }

    // if Maven central isn't setup in gradle.properties skip all of this
    if (project.hasProperty('ossrhUsername')) {
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'ProjectBUBO'
                        packaging 'pom'
                        // optionally artifactId can be defined here
                        description 'Project BUBO is a library for robotic localization and mapping'
                        url 'http://projectbubo.org'

                        scm {
                            connection 'scm:git:git@github.com:lessthanoptimal/Bubo.git'
                            developerConnection 'scm:git:git@github.com:lessthanoptimal/Bubo.git'
                            url 'https://github.com/lessthanoptimal/Bubo'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'pabeles'
                                name 'Peter Abeles'
                                email 'peter.abeles@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

// list of projects for creating javadoc and jars
def mainProjects = [':apps', ':core', ':gui', ':io']

try {
    project( ':integration:jme')
    mainProjects.add( ':integration:jme')
} catch( UnknownProjectException ignore ) {}

task createLibraryDirectory( dependsOn: mainProjects.collect {[ it+':jar',it+':sourcesJar']}.flatten() ) {
    doLast {
        // Compiled jars (bin and src) for all BoofCV modules
        ext.boofJars = files(javadocProjects.collect { project(it).tasks.jar.archivePath })
        ext.boofJars += files(javadocProjects.collect { project(it).tasks.sourcesJar.archivePath })

        // This will be a list of just external dependencies
        ext.listExternal = files(javadocProjects.collect { project(it).configurations.runtimeClasspath })
        ext.listExternal = ext.listExternal - ext.boofJars
        ext.listExternal = ext.listExternal.findAll({ !it.getName().contains("android.jar") })

        ext.fileName = "projectbubo-v"+version+"-libs"
        file(ext.fileName).deleteDir()
        file(ext.fileName).mkdir()

        copy {
            from ext.listExternal
            into ext.fileName
        }

        copy {
            from ext.boofJars
            into ext.fileName
        }

        println("\n\nSaved to directory "+ext.fileName)
    }
}

task oneJarBin(type: Jar, dependsOn: mainProjects.collect { it + ":compileJava" }) {
    baseName = 'ProjectBUBO'

    from files(mainProjects.collect { project(it).sourceSets.main.output })
}

task oneJarSrc(type: Jar) {
    baseName = 'ProjectBUBO-src'

    from files(mainProjects.collect { project(it).sourceSets.main.allSource })
}
task oneJar( dependsOn: [oneJarBin,oneJarSrc]) {

}

task alljavadoc(type: Javadoc) {
    // only include source code in src directory to avoid including 3rd party code which some projects do as a hack
    source = mainProjects.collect { project(it).fileTree('src').include('**/*.java') }
//    source = javadocProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(mainProjects.collect { project(it).sourceSets.main.compileClasspath })

    destinationDir = file("${buildDir}/docs/javadoc")
    configure(options) {
        docTitle = "ProjectBUBO JavaDoc ($project.version)"
        links = ['http://docs.oracle.com/javase/7/docs/api/',
                 'http://ejml.org/javadoc/',
                 'http://georegression.org/javadoc/',
                 'http://ddogleg.org/javadoc/']
//        header = file('misc/header.txt').text.replace("\n", "")
//        bottom = file('misc/bottom.txt').text.replace("\n", "")
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.4.1'
}

// Disable the creation of jars for distribution.  If you don't do this it will crash
[':validation'].each {String a ->
    project(a) {
        sourcesJar.enabled = false
        javadocJar.enabled = false
        jar.enabled = false
        uploadArchives.enabled = false
        install.enabled = false
    }
}

