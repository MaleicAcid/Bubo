/*
 * Copyright (c) 2013, Peter Abeles. All Rights Reserved.
 *
 * This file is part of Project BUBO.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package bubo.simulation.d2.motion;

import bubo.filters.ekf.EkfPredictorTime;
import georegression.struct.se.Se2_F64;
import org.ejml.data.DenseMatrix64F;
import org.ejml.ops.CommonOps;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

/**
 * @author Peter Abeles
 */
public class TestSimulatedPredictorModel2D {

	double controlX = 0.1;
	double controlY = 0.2;
	double controlTheta = 0.3;


	/**
	 * Simulated pose should be the same as the one generated by the predictor given the control input
	 */
	@Test
	public void checkUpdate() {
		double T = 0.5;

		DenseMatrix64F x = new DenseMatrix64F(3,1,true,1,2,0.5);

		Dummy control0 = new Dummy();
		Dummy control1 = new Dummy();

		SimulatedPredictorModel2D alg = new ImplAlg(control1,T);

		control0.compute(x,T);

		DenseMatrix64F expected = control0.getPredictedState();
		alg.setPose(new Se2_F64(x.data[0],x.data[1],x.data[2]));
		alg.update();
		Se2_F64 found = alg.getPose();

		assertEquals(expected.data[0],found.T.x,1e-8);
		assertEquals(expected.data[1],found.T.y,1e-8);
		assertEquals(expected.data[2],found.getYaw(),1e-8);
	}

	private class ImplAlg extends SimulatedPredictorModel2D {

		public ImplAlg(EkfPredictorTime model, double timePeriod) {
			super(model, timePeriod);
		}

		@Override
		protected void drawControlNoise() {}

		@Override
		public double[] getControlRequested() {
			return new double[0];
		}

		@Override
		public double[] getControlTruth() {
			return new double[0];
		}
	}

	private class Dummy implements EkfPredictorTime {

		DenseMatrix64F F = CommonOps.identity(3);
		DenseMatrix64F x = new DenseMatrix64F(3,1);
		DenseMatrix64F u = new DenseMatrix64F(3,1);

		public Dummy() {
			u.data[0] = controlX;
			u.data[0] = controlY;
			u.data[0] = controlTheta;
		}

		@Override
		public void compute(DenseMatrix64F mean, double T) {
			for( int i = 0; i < 3; i++ )
				x.data[i] = mean.data[i] + u.data[i]*T;
		}

		@Override
		public DenseMatrix64F getJacobianF() {
			return F;
		}

		@Override
		public DenseMatrix64F getPlantNoise() {
			return null;
		}

		@Override
		public DenseMatrix64F getPredictedState() {
			return x;
		}

		@Override
		public int getSystemSize() {
			return 3;
		}
	}
}
